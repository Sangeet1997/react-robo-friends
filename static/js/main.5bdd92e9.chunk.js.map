{"version":3,"sources":["Card.js","factory.js","CardList.js","Search.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","robot","className","src","imgId","name","username","email","CardList","robots","map","key","id","i","faker","findName","internet","userName","phone","phoneNumber","Search","updateRobots","placeholder","onChange","event","target","value","type","Scroll","props","style","overflowY","border","height","children","App","useState","newRobots","setNewRobots","str","searchedRobots","forEach","toLowerCase","includes","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAuBeA,MApBf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,6BACI,yBAAKC,IAAG,+BAA0BF,EAAMG,OAASF,UAAU,WAG/D,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,SAASD,EAAMI,MAC7B,wBAAIH,UAAU,QACV,4BAAI,2BAAID,EAAMK,WACd,uCACA,2BAAIL,EAAMM,Y,MCV9B,ICoBeC,MArBf,YACC,IADkBC,EACnB,EADmBA,OAEf,OACI,yBAAKP,UAAU,kBAEPO,EAAOC,KAAI,SAACT,GACR,OACI,kBAAC,EAAD,CACAU,IAAKV,EAAMW,GACXR,MAAOH,EAAMG,MACbC,KAAMJ,EAAMI,KACZC,SAAUL,EAAMK,SAChBC,MAAON,EAAMM,a,gBDdjCH,EAAQ,IACRK,EAAS,GAELI,EAAI,EAAEA,EAAE,GAAGA,IAEfJ,EAAOI,GAAG,CACND,GAAMC,EAAE,EACRT,MAAQA,IACRC,KAAOS,IAAMT,KAAKU,WAClBT,SAAWQ,IAAME,SAASC,WAC1BV,MAAQO,IAAMI,MAAMC,e,QEKbC,MAbf,YAAgC,IAAfC,EAAc,EAAdA,aAMb,OACI,yBAAKnB,UAAU,oBACX,2BAAOA,UAAU,aAAaoB,YAAY,aAAaC,SAN5C,SAACC,GAChBH,EAAaG,EAAMC,OAAOC,QAKuDC,KAAK,WCF/EC,G,QARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAQ,kBAAkBC,OAAO,UAC5DJ,EAAMK,YC2BJC,MAxBf,WAAe,IAAD,EAEsBC,mBAAS3B,GAF/B,mBAEJ4B,EAFI,KAEMC,EAFN,KAaV,OACI,yBAAKpC,UAAU,QACf,yBAAKA,UAAU,UAAS,4CACxB,kBAAC,EAAD,CAAQmB,aAZS,SAACkB,GAClB,IAAMC,EAAiB,GACvB/B,EAAOgC,SAAQ,SAAAxC,GAERA,EAAMI,KAAKqC,cAAcC,SAASJ,EAAIG,gBACrCF,EAAeI,KAAK3C,MAE5BqC,EAAaE,MAMb,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU/B,OAAS4B,OCdXQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5bdd92e9.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Card.css\"\r\n\r\nfunction Card(robot){\r\n    return(\r\n        <div className=\"card\">\r\n            <div>\r\n                <img src={`https://robohash.org/${robot.imgId}`} className=\"image\"/>\r\n            </div>\r\n\r\n            <div className=\"card-container\">\r\n                <h3 className=\"title\">{robot.name}</h3>\r\n                <ul className=\"info\">\r\n                    <li><p>{robot.username}</p></li>\r\n                    <li>Contact:\r\n                    <p>{robot.email}</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import faker from \"faker\"\r\n\r\nlet imgId = 101;\r\nlet robots = [];\r\n\r\nfor(let i = 0;i<40;i++)\r\n{\r\n    robots[i]={\r\n        id : (i+1),\r\n        imgId : imgId++,\r\n        name : faker.name.findName(),\r\n        username : faker.internet.userName(),\r\n        email : faker.phone.phoneNumber(),\r\n        }\r\n}\r\n\r\nexport {robots};","import React from 'react'\r\nimport Card from \"./Card\"\r\nimport \"./CardList.css\"\r\n\r\nfunction CardList({robots})\r\n{\r\n    return(\r\n        <div className=\"list-container\">\r\n            {\r\n                robots.map((robot)=>{\r\n                    return(\r\n                        <Card\r\n                        key={robot.id}\r\n                        imgId={robot.imgId}\r\n                        name={robot.name}\r\n                        username={robot.username}\r\n                        email={robot.email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\nimport \"./Search.css\"\r\n\r\n\r\nfunction Search({updateRobots}){\r\n    \r\n    const sendString = (event) =>{\r\n        updateRobots(event.target.value);\r\n    }\r\n\r\n    return(\r\n        <div className=\"search-container\">\r\n            <input className=\"search-box\" placeholder=\"Enter Name\" onChange={sendString} type=\"text\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY:\"scroll\",border: \"1px solid black\",height:\"535px\"}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React , {useState} from 'react'\r\nimport CardList from \"./CardList\"\r\nimport {robots} from \"./factory\"\r\nimport Search from \"./Search\"\r\nimport \"./App.css\"\r\nimport Scroll from \"./Scroll.js\"\r\n\r\n\r\nfunction App(){\r\n\r\n    const[newRobots,setNewRobots] = useState(robots);\r\n\r\n    const updateRobots = (str) =>{\r\n        const searchedRobots = [];\r\n        robots.forEach(robot =>{\r\n            \r\n            if(robot.name.toLowerCase().includes(str.toLowerCase()))\r\n                searchedRobots.push(robot);\r\n        })\r\n        setNewRobots(searchedRobots);\r\n    }\r\n    return(\r\n        <div className=\"body\">\r\n        <div className=\"header\"><h1>ROBOFRIENDS</h1></div>\r\n        <Search updateRobots ={updateRobots}/>\r\n        <Scroll>\r\n            <CardList robots ={newRobots}/>\r\n        </Scroll>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}